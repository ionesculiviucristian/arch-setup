GC='\033[0;36m'
AC='\033[0;32m'
NC='\033[0m'

function aliases() {
	echo -e "\n${GC}File system${NC}\n"
	echo -e "  ${AC}..${NC}: Go up a directory level"
	echo -e "  ${AC}...${NC}: Go up two directory levels"
	echo -e "  ${AC}....${NC}: Go up three directory levels"
	echo -e "  ${AC}.....${NC}: Go up four directory levels"
	echo -e "  ${AC}.1${NC}: Go up a directory level"
	echo -e "  ${AC}.2${NC}: Go up two directory levels"
	echo -e "  ${AC}.3${NC}: Go up three directory levels"
	echo -e "  ${AC}.4${NC}: Go up four directory levels"
	echo -e "  ${AC}files${NC}: Show a sorted list of file and folder sizes"
	echo -e "  ${AC}ll${NC}: Show a detailed list of all files and folders"
	echo -e "  ${AC}space${NC}: Show disk space for all filesystems"
	echo -e "  ${AC}tree${NC}: Print out a directory structure in a tree-like"
	echo -e "\n${GC}Packages manager${NC}\n"
	echo -e "  ${AC}pkgi${NC} <PACKAGE...>: Install packages"
	echo -e "  ${AC}pkgl${NC}: List package sizes with their dependencies"
	echo -e "  ${AC}pkgr${NC} <PACKAGE...>: Remove packages"
	echo -e "  ${AC}pkgu${NC}: Update packages"
	echo -e "\n${GC}Docker${NC}\n"
	echo -e "  ${AC}dex${NC} <CONTAINER> [COMMAND] {sh}: Execute a command in a running container"
	echo -e "  ${AC}dexenv${NC} <CONTAINER>: Execute printenv in a running container"
	echo -e "  ${AC}dexr${NC} <CONTAINER> [COMMAND] {sh}: Execute a command in a running container, as root"
	echo -e "  ${AC}di${NC} <NAME|ID>: Return low-level information on Docker objects"
	echo -e "  ${AC}dimls${NC}: List images"
	echo -e "  ${AC}dimlsa${NC}: List all docker images"
	echo -e "  ${AC}dimlsf${NC} <PATTERN>: Filter docker images"
	echo -e "  ${AC}dl${NC} <CONTAINER>: Fetch the logs of a container"
	echo -e "  ${AC}dlclr${NC}: Empty the log files from all containers"
	echo -e "  ${AC}dlsz${NC}: List all container log files ordered by their size"
	echo -e "  ${AC}dnls${NC}: List networks"
	echo -e "  ${AC}dnlsf${NC} <PATTERN>: Filter docker networks"
	echo -e "  ${AC}dps${NC}: List running containers"
	echo -e "  ${AC}dpsa${NC}: List all containers"
	echo -e "  ${AC}dpsaf${NC} <PATTERN>: Filter all containers list using grep pattern"
	echo -e "  ${AC}dpsf${NC} <PATTERN>: Filter running containers list using grep pattern"
	echo -e "  ${AC}dr${NC} <CONTAINER...>: Restart one or more containers"
	echo -e "  ${AC}drl${NC} <CONTAINER>: Restart and fetch the logs of a container"
	echo -e "  ${AC}ds${NC} <CONTAINER...>: Stop one or more running containers"
	echo -e "  ${AC}dsa${NC}: Stop all running containers"
	echo -e "  ${AC}dtopc${NC}: Display container resource usage sorted by highest CPU usage"
	echo -e "  ${AC}dtopm${NC}: Display container resource usage sorted by highest memory usage"
	echo -e "  ${AC}dvls${NC}: List volumes"
	echo -e "  ${AC}dvlsf${NC} <PATTERN>: Filter docker volumes"
	echo -e "  ${AC}dvrm${NC}: Remove one or more volumes"
	echo -e "\n${GC}Docker compose${NC}\n"
	echo -e "  ${AC}dc${NC}: Define and run multi-container applications with Docker"
	echo -e "  ${AC}dcb${NC} <SERVICE...>: Build or rebuild services"
	echo -e "  ${AC}dcd${NC} <SERVICE...>: Stop and remove containers"
	echo -e "  ${AC}dcdv${NC} <SERVICE...>: Stop and remove containers, including volumes"
	echo -e "  ${AC}dcex${NC} <SERVICE> [COMMAND] {sh}: Execute a command in a running container"
	echo -e "  ${AC}dcexenv${NC} <SERVICE>: Execute printenv in a running container"
	echo -e "  ${AC}dcexr${NC} <SERVICE> [COMMAND] {sh}: Execute a command in a running container, as root"
	echo -e "  ${AC}dci${NC} <SERVICE>: Return low-level information on Docker objects"
	echo -e "  ${AC}dcl${NC} <SERVICE...>: View output from containers"
	echo -e "  ${AC}dcps${NC} <SERVICE...>: List containers"
	echo -e "  ${AC}dcpsf${NC} <SERVICE>: Filter running containers list using grep pattern"
	echo -e "  ${AC}dcr${NC} <SERVICE...>: Restart service containers"
	echo -e "  ${AC}dcrl${NC} <SERVICE...>: Restart service containers and view their output"
	echo -e "  ${AC}dcu${NC} <SERVICE...>: Create and start containers"
	echo -e "  ${AC}dcub${NC} <SERVICE...>: Build, create and start containers"
	echo -e "  ${AC}dcuf${NC} <SERVICE...>: Recreate and start containers even if their configuration and image haven't changed"
	echo -e "  ${AC}dcul${NC} <SERVICE...>: Create, start and view output from containers"
	echo -e "\n${GC}git${NC}\n"
	echo -e "  ${AC}gic${NC} [MESSAGE] {WIP}: Stage and commit all files from current directory"
	echo -e "  ${AC}gica${NC}: Amend commit"
	echo -e "  ${AC}gicb${NC} <BRANCH>: Create and checkout branch"
	echo -e "  ${AC}gicob${NC} <BRANCH>: Checkout branch"
	echo -e "  ${AC}gicpu${NC} [MESSAGE] {WIP}: Stage, commit and push all files from current directory"
	echo -e "  ${AC}gicpuf${NC} [MESSAGE] {WIP}: Stage, commit and force push with lease all files from current directory"
	echo -e "  ${AC}gif${NC}: Download objects and refs from another repository"
	echo -e "  ${AC}gil${NC}: Show commit logs"
	echo -e "  ${AC}gilsb${NC}: List branches"
	echo -e "  ${AC}gim${NC} <BRANCH...>: Join two or more development histories together"
	echo -e "  ${AC}gip${NC}: Fetch from and integrate with another repository or a local branch"
	echo -e "  ${AC}gipr${NC}: Fetch from and integrate with another repository or a local branch using rebase"
	echo -e "  ${AC}gipu${NC}: Update remote refs along with associated objects"
	echo -e "  ${AC}gipuf${NC}: Force update with lease remote refs along with associated objects"
	echo -e "  ${AC}girb${NC} <OLD BRANCH> <NEW BRANCH>: Rename branch"
	echo -e "  ${AC}girh${NC} <SHA1>: Hard reset current HEAD to the specified state"
	echo -e "  ${AC}gis${NC}: Stash the changes in a dirty working directory away"
	echo -e "  ${AC}gisp${NC}: Remove a single stashed state from the stash list and apply it on top of the current working tree state"
	echo -e "  ${AC}gisq${NC} <SHA1> <MESSAGE>: Squash commits"
	echo -e "  ${AC}gisqa${NC} <MESSAGE>: Squashes ALL commits of the current branch"
	echo -e "\n${GC}poetry${NC}\n"
	echo -e "  ${AC}poi${NC}: Install project dependencies"
	echo -e "  ${AC}pos${NC}: Spawn a shell within the virtual environment"
	echo -e "\n${GC}tmux${NC}\n"
	echo -e "  ${AC}tas${NC} [SESSION]: Attach to a session"
	echo -e "  ${AC}tks${NC} <SESSION>: Kill/delete a session"
	echo -e "  ${AC}tksrv${NC}: Kill/delete all sessions"
	echo -e "  ${AC}tls${NC}: Show all sessions"
	echo -e "  ${AC}tns${NC} [SESSION]: Start a new session"
	echo -e "\n${GC}Projects${NC}\n"
	echo -e "  ${AC}proj${NC}: Set the current working directory to \`~/Projects\`"
	echo -e "  ${AC}projc${NC} <NAME>: Create a new project in \`~/Projects\`"
	echo -e "  ${AC}projo${NC} <NAME>: Open a project found in \`~/Projects\` with code editor"
	echo -e "\n${GC}Misc${NC}\n"
	echo -e "  ${AC}backup${NC}: Backup files from current directory to \`~/Backups\`"
	echo -e "  ${AC}logs${NC}: Tail all journal entries"
	echo -e "  ${AC}logsb${NC}: View all journal entries since last boot"
	echo -e "  ${AC}ports${NC}: Lists listening TCP/UDP sockets"
	echo -e "  ${AC}portsf${NC} <PORT>: Filter listening TCP/UDP sockets"
	echo -e "  ${AC}ppjson${NC} <FILE>: Pretty prints a json file"
	echo -e "  ${AC}sail${NC}: Execute Sail's commands more easily"
	echo -e "  ${AC}src${NC}: Source \`~/.bashrc\`"
}
